// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// generator trpc {
//   provider       = "prisma-trpc-generator"
//   withMiddleware = false
//   withShield     = true
//   contextPath    = "@/server/trpc/context"
//   output         = "@/server/trpc"
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Custom Fields
  role             RoleType         @default(USER)
  customerPayment  CustomerPayment?
  authoredWorkouts Workout[]        @relation("WorkoutAuthor")
  savedWorkouts    Workout[]        @relation("WorkoutSaves")
  username         String           @unique @default(cuid())

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([username])
}

enum RoleType {
  USER
  ADMIN
  SUPERADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workout {
  id       Int     @id @default(autoincrement())
  name     String
  tags     Tag[]
  author   User?   @relation(name: "WorkoutAuthor", fields: [authorId], references: [id])
  authorId String?
  savedBy  User[]  @relation("WorkoutSaves")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([authorId])
}

model Exercise {
  id          Int    @id @default(autoincrement())
  name        String @unique
  difficulty  String
  sets        Int    @default(1)
  reps        String
  rest        String
  tags        Tag[]
  exampleLink String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  exercises Exercise[]
  workouts  Workout[]

  @@index([name])
}

// Stripe Config
model CustomerPayment {
  id               String           @id @default(cuid())
  paymentId        String           @unique
  customerId       String           @unique
  email            String?          @unique
  subscriptionType SubscriptionType @default(FREE)
  createdAt        DateTime?        @default(now())
  deletedAt        DateTime?
  updatedAt        DateTime?        @updatedAt
  customer         User             @relation(fields: [customerId], references: [id])
}

enum SubscriptionType {
  FREE
  PRO
  ELITE
  UNLIMITED
}
